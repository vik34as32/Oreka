/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.4
 * source: tab.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./tabcolumn";
import * as pb_1 from "google-protobuf";
export namespace Oreka {
    export class Tab extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tabname?: string;
            columns?: dependency_1.Oreka.TabColumn[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tabname" in data && data.tabname != undefined) {
                    this.tabname = data.tabname;
                }
                if ("columns" in data && data.columns != undefined) {
                    this.columns = data.columns;
                }
            }
        }
        get tabname() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tabname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get columns() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Oreka.TabColumn, 2) as dependency_1.Oreka.TabColumn[];
        }
        set columns(value: dependency_1.Oreka.TabColumn[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            tabname?: string;
            columns?: ReturnType<typeof dependency_1.Oreka.TabColumn.prototype.toObject>[];
        }): Tab {
            const message = new Tab({});
            if (data.tabname != null) {
                message.tabname = data.tabname;
            }
            if (data.columns != null) {
                message.columns = data.columns.map(item => dependency_1.Oreka.TabColumn.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                tabname?: string;
                columns?: ReturnType<typeof dependency_1.Oreka.TabColumn.prototype.toObject>[];
            } = {};
            if (this.tabname != null) {
                data.tabname = this.tabname;
            }
            if (this.columns != null) {
                data.columns = this.columns.map((item: dependency_1.Oreka.TabColumn) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tabname.length)
                writer.writeString(1, this.tabname);
            if (this.columns.length)
                writer.writeRepeatedMessage(2, this.columns, (item: dependency_1.Oreka.TabColumn) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Tab {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Tab();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tabname = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.columns, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.Oreka.TabColumn.deserialize(reader), dependency_1.Oreka.TabColumn));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Tab {
            return Tab.deserialize(bytes);
        }
    }
}
