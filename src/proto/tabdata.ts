/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.4
 * source: tabdata.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./tab";
import * as pb_1 from "google-protobuf";
export namespace Oreka {
    export class TabData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tabs?: dependency_1.Oreka.Tab[];
            name?: string;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tabs" in data && data.tabs != undefined) {
                    this.tabs = data.tabs;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get tabs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Oreka.Tab, 1) as dependency_1.Oreka.Tab[];
        }
        set tabs(value: dependency_1.Oreka.Tab[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            tabs?: ReturnType<typeof dependency_1.Oreka.Tab.prototype.toObject>[];
            name?: string;
            id?: string;
        }): TabData {
            const message = new TabData({});
            if (data.tabs != null) {
                message.tabs = data.tabs.map(item => dependency_1.Oreka.Tab.fromObject(item));
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                tabs?: ReturnType<typeof dependency_1.Oreka.Tab.prototype.toObject>[];
                name?: string;
                id?: string;
            } = {};
            if (this.tabs != null) {
                data.tabs = this.tabs.map((item: dependency_1.Oreka.Tab) => item.toObject());
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tabs.length)
                writer.writeRepeatedMessage(1, this.tabs, (item: dependency_1.Oreka.Tab) => item.serialize(writer));
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.id.length)
                writer.writeString(3, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TabData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TabData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tabs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.Oreka.Tab.deserialize(reader), dependency_1.Oreka.Tab));
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TabData {
            return TabData.deserialize(bytes);
        }
    }
}
