/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.4
 * source: AlertSetting.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace Oreka {
    export class AlertSetting extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            alert_name?: string;
            trigger_type?: string;
            start_time?: string;
            expiry_time?: string;
            days_of_week?: string[];
            selected_months?: string[];
            days_of_month?: string[];
            repetitions?: number;
            days?: number;
            hours?: number;
            minutes?: number;
            conditions?: AlertSetting.Conditions[];
            actions?: AlertSetting.Actions[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 7, 8, 13, 14], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("alert_name" in data && data.alert_name != undefined) {
                    this.alert_name = data.alert_name;
                }
                if ("trigger_type" in data && data.trigger_type != undefined) {
                    this.trigger_type = data.trigger_type;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("expiry_time" in data && data.expiry_time != undefined) {
                    this.expiry_time = data.expiry_time;
                }
                if ("days_of_week" in data && data.days_of_week != undefined) {
                    this.days_of_week = data.days_of_week;
                }
                if ("selected_months" in data && data.selected_months != undefined) {
                    this.selected_months = data.selected_months;
                }
                if ("days_of_month" in data && data.days_of_month != undefined) {
                    this.days_of_month = data.days_of_month;
                }
                if ("repetitions" in data && data.repetitions != undefined) {
                    this.repetitions = data.repetitions;
                }
                if ("days" in data && data.days != undefined) {
                    this.days = data.days;
                }
                if ("hours" in data && data.hours != undefined) {
                    this.hours = data.hours;
                }
                if ("minutes" in data && data.minutes != undefined) {
                    this.minutes = data.minutes;
                }
                if ("conditions" in data && data.conditions != undefined) {
                    this.conditions = data.conditions;
                }
                if ("actions" in data && data.actions != undefined) {
                    this.actions = data.actions;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get alert_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set alert_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set trigger_type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set start_time(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get expiry_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set expiry_time(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get days_of_week() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set days_of_week(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get selected_months() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set selected_months(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get days_of_month() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set days_of_month(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get repetitions() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set repetitions(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get days() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set days(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get hours() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set hours(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get minutes() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set minutes(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get conditions() {
            return pb_1.Message.getRepeatedWrapperField(this, AlertSetting.Conditions, 13) as AlertSetting.Conditions[];
        }
        set conditions(value: AlertSetting.Conditions[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get actions() {
            return pb_1.Message.getRepeatedWrapperField(this, AlertSetting.Actions, 14) as AlertSetting.Actions[];
        }
        set actions(value: AlertSetting.Actions[]) {
            pb_1.Message.setRepeatedWrapperField(this, 14, value);
        }
        static fromObject(data: {
            type?: string;
            alert_name?: string;
            trigger_type?: string;
            start_time?: string;
            expiry_time?: string;
            days_of_week?: string[];
            selected_months?: string[];
            days_of_month?: string[];
            repetitions?: number;
            days?: number;
            hours?: number;
            minutes?: number;
            conditions?: ReturnType<typeof AlertSetting.Conditions.prototype.toObject>[];
            actions?: ReturnType<typeof AlertSetting.Actions.prototype.toObject>[];
        }): AlertSetting {
            const message = new AlertSetting({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.alert_name != null) {
                message.alert_name = data.alert_name;
            }
            if (data.trigger_type != null) {
                message.trigger_type = data.trigger_type;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.expiry_time != null) {
                message.expiry_time = data.expiry_time;
            }
            if (data.days_of_week != null) {
                message.days_of_week = data.days_of_week;
            }
            if (data.selected_months != null) {
                message.selected_months = data.selected_months;
            }
            if (data.days_of_month != null) {
                message.days_of_month = data.days_of_month;
            }
            if (data.repetitions != null) {
                message.repetitions = data.repetitions;
            }
            if (data.days != null) {
                message.days = data.days;
            }
            if (data.hours != null) {
                message.hours = data.hours;
            }
            if (data.minutes != null) {
                message.minutes = data.minutes;
            }
            if (data.conditions != null) {
                message.conditions = data.conditions.map(item => AlertSetting.Conditions.fromObject(item));
            }
            if (data.actions != null) {
                message.actions = data.actions.map(item => AlertSetting.Actions.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                alert_name?: string;
                trigger_type?: string;
                start_time?: string;
                expiry_time?: string;
                days_of_week?: string[];
                selected_months?: string[];
                days_of_month?: string[];
                repetitions?: number;
                days?: number;
                hours?: number;
                minutes?: number;
                conditions?: ReturnType<typeof AlertSetting.Conditions.prototype.toObject>[];
                actions?: ReturnType<typeof AlertSetting.Actions.prototype.toObject>[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.alert_name != null) {
                data.alert_name = this.alert_name;
            }
            if (this.trigger_type != null) {
                data.trigger_type = this.trigger_type;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.expiry_time != null) {
                data.expiry_time = this.expiry_time;
            }
            if (this.days_of_week != null) {
                data.days_of_week = this.days_of_week;
            }
            if (this.selected_months != null) {
                data.selected_months = this.selected_months;
            }
            if (this.days_of_month != null) {
                data.days_of_month = this.days_of_month;
            }
            if (this.repetitions != null) {
                data.repetitions = this.repetitions;
            }
            if (this.days != null) {
                data.days = this.days;
            }
            if (this.hours != null) {
                data.hours = this.hours;
            }
            if (this.minutes != null) {
                data.minutes = this.minutes;
            }
            if (this.conditions != null) {
                data.conditions = this.conditions.map((item: AlertSetting.Conditions) => item.toObject());
            }
            if (this.actions != null) {
                data.actions = this.actions.map((item: AlertSetting.Actions) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.alert_name.length)
                writer.writeString(2, this.alert_name);
            if (this.trigger_type.length)
                writer.writeString(3, this.trigger_type);
            if (this.start_time.length)
                writer.writeString(4, this.start_time);
            if (this.expiry_time.length)
                writer.writeString(5, this.expiry_time);
            if (this.days_of_week.length)
                writer.writeRepeatedString(6, this.days_of_week);
            if (this.selected_months.length)
                writer.writeRepeatedString(7, this.selected_months);
            if (this.days_of_month.length)
                writer.writeRepeatedString(8, this.days_of_month);
            if (this.repetitions != 0)
                writer.writeUint32(9, this.repetitions);
            if (this.days != 0)
                writer.writeUint32(10, this.days);
            if (this.hours != 0)
                writer.writeUint32(11, this.hours);
            if (this.minutes != 0)
                writer.writeUint32(12, this.minutes);
            if (this.conditions.length)
                writer.writeRepeatedMessage(13, this.conditions, (item: AlertSetting.Conditions) => item.serialize(writer));
            if (this.actions.length)
                writer.writeRepeatedMessage(14, this.actions, (item: AlertSetting.Actions) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlertSetting {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlertSetting();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.alert_name = reader.readString();
                        break;
                    case 3:
                        message.trigger_type = reader.readString();
                        break;
                    case 4:
                        message.start_time = reader.readString();
                        break;
                    case 5:
                        message.expiry_time = reader.readString();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.repetitions = reader.readUint32();
                        break;
                    case 10:
                        message.days = reader.readUint32();
                        break;
                    case 11:
                        message.hours = reader.readUint32();
                        break;
                    case 12:
                        message.minutes = reader.readUint32();
                        break;
                    case 13:
                        reader.readMessage(message.conditions, () => pb_1.Message.addToRepeatedWrapperField(message, 13, AlertSetting.Conditions.deserialize(reader), AlertSetting.Conditions));
                        break;
                    case 14:
                        reader.readMessage(message.actions, () => pb_1.Message.addToRepeatedWrapperField(message, 14, AlertSetting.Actions.deserialize(reader), AlertSetting.Actions));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlertSetting {
            return AlertSetting.deserialize(bytes);
        }
    }
    export namespace AlertSetting {
        export class Or_condition extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                or_compare_condition?: string;
                or_condition_type?: string;
                or_condition_value?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("or_compare_condition" in data && data.or_compare_condition != undefined) {
                        this.or_compare_condition = data.or_compare_condition;
                    }
                    if ("or_condition_type" in data && data.or_condition_type != undefined) {
                        this.or_condition_type = data.or_condition_type;
                    }
                    if ("or_condition_value" in data && data.or_condition_value != undefined) {
                        this.or_condition_value = data.or_condition_value;
                    }
                }
            }
            get or_compare_condition() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set or_compare_condition(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get or_condition_type() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set or_condition_type(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get or_condition_value() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set or_condition_value(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                or_compare_condition?: string;
                or_condition_type?: string;
                or_condition_value?: string;
            }): Or_condition {
                const message = new Or_condition({});
                if (data.or_compare_condition != null) {
                    message.or_compare_condition = data.or_compare_condition;
                }
                if (data.or_condition_type != null) {
                    message.or_condition_type = data.or_condition_type;
                }
                if (data.or_condition_value != null) {
                    message.or_condition_value = data.or_condition_value;
                }
                return message;
            }
            toObject() {
                const data: {
                    or_compare_condition?: string;
                    or_condition_type?: string;
                    or_condition_value?: string;
                } = {};
                if (this.or_compare_condition != null) {
                    data.or_compare_condition = this.or_compare_condition;
                }
                if (this.or_condition_type != null) {
                    data.or_condition_type = this.or_condition_type;
                }
                if (this.or_condition_value != null) {
                    data.or_condition_value = this.or_condition_value;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.or_compare_condition.length)
                    writer.writeString(1, this.or_compare_condition);
                if (this.or_condition_type.length)
                    writer.writeString(2, this.or_condition_type);
                if (this.or_condition_value.length)
                    writer.writeString(3, this.or_condition_value);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Or_condition {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Or_condition();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.or_compare_condition = reader.readString();
                            break;
                        case 2:
                            message.or_condition_type = reader.readString();
                            break;
                        case 3:
                            message.or_condition_value = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Or_condition {
                return Or_condition.deserialize(bytes);
            }
        }
        export class Conditions extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                compare_condition?: string;
                condition_type?: string;
                condition_value?: string;
                or_condition?: AlertSetting.Or_condition[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("compare_condition" in data && data.compare_condition != undefined) {
                        this.compare_condition = data.compare_condition;
                    }
                    if ("condition_type" in data && data.condition_type != undefined) {
                        this.condition_type = data.condition_type;
                    }
                    if ("condition_value" in data && data.condition_value != undefined) {
                        this.condition_value = data.condition_value;
                    }
                    if ("or_condition" in data && data.or_condition != undefined) {
                        this.or_condition = data.or_condition;
                    }
                }
            }
            get compare_condition() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set compare_condition(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get condition_type() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set condition_type(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get condition_value() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set condition_value(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get or_condition() {
                return pb_1.Message.getRepeatedWrapperField(this, AlertSetting.Or_condition, 4) as AlertSetting.Or_condition[];
            }
            set or_condition(value: AlertSetting.Or_condition[]) {
                pb_1.Message.setRepeatedWrapperField(this, 4, value);
            }
            static fromObject(data: {
                compare_condition?: string;
                condition_type?: string;
                condition_value?: string;
                or_condition?: ReturnType<typeof AlertSetting.Or_condition.prototype.toObject>[];
            }): Conditions {
                const message = new Conditions({});
                if (data.compare_condition != null) {
                    message.compare_condition = data.compare_condition;
                }
                if (data.condition_type != null) {
                    message.condition_type = data.condition_type;
                }
                if (data.condition_value != null) {
                    message.condition_value = data.condition_value;
                }
                if (data.or_condition != null) {
                    message.or_condition = data.or_condition.map(item => AlertSetting.Or_condition.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    compare_condition?: string;
                    condition_type?: string;
                    condition_value?: string;
                    or_condition?: ReturnType<typeof AlertSetting.Or_condition.prototype.toObject>[];
                } = {};
                if (this.compare_condition != null) {
                    data.compare_condition = this.compare_condition;
                }
                if (this.condition_type != null) {
                    data.condition_type = this.condition_type;
                }
                if (this.condition_value != null) {
                    data.condition_value = this.condition_value;
                }
                if (this.or_condition != null) {
                    data.or_condition = this.or_condition.map((item: AlertSetting.Or_condition) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.compare_condition.length)
                    writer.writeString(1, this.compare_condition);
                if (this.condition_type.length)
                    writer.writeString(2, this.condition_type);
                if (this.condition_value.length)
                    writer.writeString(3, this.condition_value);
                if (this.or_condition.length)
                    writer.writeRepeatedMessage(4, this.or_condition, (item: AlertSetting.Or_condition) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Conditions {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Conditions();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.compare_condition = reader.readString();
                            break;
                        case 2:
                            message.condition_type = reader.readString();
                            break;
                        case 3:
                            message.condition_value = reader.readString();
                            break;
                        case 4:
                            reader.readMessage(message.or_condition, () => pb_1.Message.addToRepeatedWrapperField(message, 4, AlertSetting.Or_condition.deserialize(reader), AlertSetting.Or_condition));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Conditions {
                return Conditions.deserialize(bytes);
            }
        }
        export class Actions extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                action?: string;
                action_name?: string;
                action_send_by?: string;
                action_send_to?: string;
                action_trigger?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("action" in data && data.action != undefined) {
                        this.action = data.action;
                    }
                    if ("action_name" in data && data.action_name != undefined) {
                        this.action_name = data.action_name;
                    }
                    if ("action_send_by" in data && data.action_send_by != undefined) {
                        this.action_send_by = data.action_send_by;
                    }
                    if ("action_send_to" in data && data.action_send_to != undefined) {
                        this.action_send_to = data.action_send_to;
                    }
                    if ("action_trigger" in data && data.action_trigger != undefined) {
                        this.action_trigger = data.action_trigger;
                    }
                }
            }
            get action() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set action(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get action_name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set action_name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get action_send_by() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set action_send_by(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get action_send_to() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set action_send_to(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get action_trigger() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set action_trigger(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                action?: string;
                action_name?: string;
                action_send_by?: string;
                action_send_to?: string;
                action_trigger?: string;
            }): Actions {
                const message = new Actions({});
                if (data.action != null) {
                    message.action = data.action;
                }
                if (data.action_name != null) {
                    message.action_name = data.action_name;
                }
                if (data.action_send_by != null) {
                    message.action_send_by = data.action_send_by;
                }
                if (data.action_send_to != null) {
                    message.action_send_to = data.action_send_to;
                }
                if (data.action_trigger != null) {
                    message.action_trigger = data.action_trigger;
                }
                return message;
            }
            toObject() {
                const data: {
                    action?: string;
                    action_name?: string;
                    action_send_by?: string;
                    action_send_to?: string;
                    action_trigger?: string;
                } = {};
                if (this.action != null) {
                    data.action = this.action;
                }
                if (this.action_name != null) {
                    data.action_name = this.action_name;
                }
                if (this.action_send_by != null) {
                    data.action_send_by = this.action_send_by;
                }
                if (this.action_send_to != null) {
                    data.action_send_to = this.action_send_to;
                }
                if (this.action_trigger != null) {
                    data.action_trigger = this.action_trigger;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.action.length)
                    writer.writeString(1, this.action);
                if (this.action_name.length)
                    writer.writeString(2, this.action_name);
                if (this.action_send_by.length)
                    writer.writeString(3, this.action_send_by);
                if (this.action_send_to.length)
                    writer.writeString(4, this.action_send_to);
                if (this.action_trigger.length)
                    writer.writeString(5, this.action_trigger);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Actions {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Actions();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.action = reader.readString();
                            break;
                        case 2:
                            message.action_name = reader.readString();
                            break;
                        case 3:
                            message.action_send_by = reader.readString();
                            break;
                        case 4:
                            message.action_send_to = reader.readString();
                            break;
                        case 5:
                            message.action_trigger = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Actions {
                return Actions.deserialize(bytes);
            }
        }
    }
}
