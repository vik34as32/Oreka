/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.4
 * source: loginrequest.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace Oreka {
    export class LoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            login?: string;
            pwd?: string;
            serialNo?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("login" in data && data.login != undefined) {
                    this.login = data.login;
                }
                if ("pwd" in data && data.pwd != undefined) {
                    this.pwd = data.pwd;
                }
                if ("serialNo" in data && data.serialNo != undefined) {
                    this.serialNo = data.serialNo;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get login() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set login(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get pwd() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set pwd(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get serialNo() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set serialNo(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            type?: string;
            login?: string;
            pwd?: string;
            serialNo?: string;
        }): LoginRequest {
            const message = new LoginRequest({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.login != null) {
                message.login = data.login;
            }
            if (data.pwd != null) {
                message.pwd = data.pwd;
            }
            if (data.serialNo != null) {
                message.serialNo = data.serialNo;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                login?: string;
                pwd?: string;
                serialNo?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.login != null) {
                data.login = this.login;
            }
            if (this.pwd != null) {
                data.pwd = this.pwd;
            }
            if (this.serialNo != null) {
                data.serialNo = this.serialNo;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.login.length)
                writer.writeString(2, this.login);
            if (this.pwd.length)
                writer.writeString(3, this.pwd);
            if (this.serialNo.length)
                writer.writeString(4, this.serialNo);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.login = reader.readString();
                        break;
                    case 3:
                        message.pwd = reader.readString();
                        break;
                    case 4:
                        message.serialNo = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginRequest {
            return LoginRequest.deserialize(bytes);
        }
    }
}
